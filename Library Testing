import tkinter as tk
from tkinter import *

#Classes
class Library(tk.Tk):
    def __init__(self, ID):
        super().__init__()

        self.ID = ID    
        self.bookList = []      #Make seperate booklists for the filter options
        self.filterOptions = ["Alphabetical", "Date added", "Favourite"]    
        self.ascending = True

        #Window settings
        self.title("Library")
        self.geometry("650x650")

        self.filterOptions = ["Alphabetical", "Date added", "Favourite"]    #Options for the dropdown
        self.chosenFilter = StringVar()
        self.chosenFilter.set("Alphabetical")

        #Initializing the bookList
        with open("bookList.csv", 'r') as f:
            self.bookList = []
            for book in f:
                book = book.strip()
                a = book.split(',')
                self.bookList.append(a)



        #Setting up the grids
        self.bookGrid = []
        for row in range(0,9):              #Grid has 9 rows
            self.bookGrid.append([])

        #Ordering the booklist into a 2D array
        row = 0
        counter = 0
        index = 0
        run = True

        while run == True:
            self.bookGrid[row].append(self.bookList[index])
            counter += 1
            index += 1

            if counter == 11:           #The amount of coloums, everytime it reaches 11 it goes to a new row
                row += 1
                counter = 0

            if self.bookList[index] == self.bookList[-1]:       #If index is last entry stop the loop the code
                self.bookGrid[row].append(self.bookList[index])
                break


        counter = 1
        for i in self.bookGrid:
            print(f"Row {counter}: {i}")
            counter += 1





        #Objects initialize
        self.labelLibraryName = Label(self, text="Novels")

        self.buttonEscape = Button(self, text="Escape", command=self.escape)
        self.buttonAdd = Button(self, text="Add", command=self.addBook)
        self.buttonRemove = Button(self, text="Remove", command=self.remove)

        #Function to set up the books (Initial)
        self.coordinateX = 30
        self.coordinateY = 60

        coordinateX = self.coordinateX
        coordinateY = self.coordinateY

        for row in range(0,3):              #Loops to place the rows and column
            for column in range (0,11):          #Placeholder:self.bookList[column]
                Button(self, text="Book\nTest", command=self.read, width=2, height=5).place(x=coordinateX,y=coordinateY)
                coordinateX = coordinateX + 50
            coordinateX = self.coordinateX
            coordinateY = coordinateY + 100
            





        self.entrySearch = Entry(self, text="Search...", width=25)

        self.optionMenuFilter = OptionMenu(self, self.chosenFilter, *self.filterOptions)

        #Placements
        self.labelLibraryName.place(x=200,y=0)

        self.buttonEscape.place(x=0, y=0)
        self.buttonAdd.place(x=450,y=30)
        self.buttonRemove.place(x=550, y=30)

        self.entrySearch.place(x=400,y=0)

        self.optionMenuFilter.place(x=280,y=5)

        #Configs
        self.optionMenuFilter.config(width=7)
        self.bind("<Escape>", self.escape)



    def showall(self):
        print(f"Books currently in the library: {len(self.bookList)}")
        counter = 0
        for i in self.bookList:
            counter += 1
            print(f"Book {counter}: {i.name}, {i.favourite}")

        print("Here's what the current library list looks like")
        print(self.bookList)
            
    def addBook(self):
        addABook = Toplevel(self)  # Create a new window
        addABook.title("Add Book")
        addABook.geometry("600x500")  
        Label(addABook, text="Add Books").place(x=150,y=0)
        Label(addABook, text="Name").place(x=30,y=250)
        Label(addABook, text="Link").place(x=30,y=400)
        Label(addABook, text="Description/Comments").place(x=350,y=100)

        bookName = Entry(addABook, bg="white", fg="black")
        link = Entry(addABook, bg="white", fg="black")
        comments = Entry(addABook, bg="white", fg="black")

        bookName.place(x=30,y=300)
        link.place(x=30,y=450)
        comments.place(x=350,y=150)

        Button(addABook, text="Cancel", command=self.nothing).place(x=400,y=350)
        Button(addABook, text="Add", command=lambda: self.add(bookName.get(), link.get(), comments.get())).place(x=500,y=350)

    def add(self, title, link=None, comments=None, favourite=""):
        print(title)
        with open ("bookList.csv", "a") as f:
            f.write(f"{title},{link},{comments},{favourite}") 
            f.write("\n")

    def remove(self):
        pass

    def change(self):
        pass

    def filter(self):
        pass

    def read(self):
        print(self)
        pass

    def test(self):
        print("Works!")

    def escape(self, event=None):
        self.destroy()

    def nothing(self):
        #Does absolutely nothing!
        pass

class Book:
    def __init__(self, name, favourite=False, position=None, dateAdded=None, link=None, author=None, comments=None):
        self.name = name
        self.favourite = favourite
        self.dateAdded = dateAdded
        self.links = link
        self.author = author
        self.comments = comments


    def show(self):
        print(self.name, self.position, "favourite:", self.favourite)

    def hover(self, event):
        pass

"""
#Functions
def add():
    Librarby.addBook()

def remove():
    pass

def bookify(name, favourite=False):
    book = Book(name, favourite)
    Librarby.add(book)

def escape(event=None):
    window.destroy()


def read():
    pass

def nothing():
    #Nothing happens
    pass
"""



"""
with open("bookList.csv", 'r') as f:
    bookList = []
    for line in f:
        line = line.strip()
        a = line.split(',')
        bookList.append(a)

for object in bookList:
    name = object[1]
    favourite = bool(object[2]) #As long as object[2] = "", bool will return false.
    book = Book(name, favourite)
    Librarby.read(book)
"""

if __name__ == "__main__":
    window = Library(1)
    window.mainloop()


