import tkinter as tk
from tkinter import *
import datetime
import requests 



#Classes
class Library(tk.Tk):
    def __init__(self, ID):
        super().__init__()

        self.ID = ID    
        self.bookList = []      #Make seperate booklists for the filter options
        self.filterOptions = ["Alphabetical", "Date added", "Favourite"]    
        self.ascending = True

        #Window settings
        self.title("Library")
        self.geometry("650x650")

        self.filterOptions = ["Alphabetical", "Date added", "Favourite"]    #Options for the dropdown
        self.chosenFilter = StringVar()
        self.chosenFilter.set("Date added")

        #Initializing the bookList
        self.read()

        #Objects initialize
        self.labelLibraryName = Label(self, text="Novels")

        self.buttonEscape = Button(self, text="Escape", command=self.escape)
        self.buttonAdd = Button(self, text="Add", command=self.addBook)
        self.buttonRemove = Button(self, text="Remove", command=self.removeBook)

        self.createBooks()

        self.entrySearch = Entry(self, text="Search...", width=25)

        self.optionMenuFilter = OptionMenu(self, self.chosenFilter, *self.filterOptions)

        #Placements
        self.labelLibraryName.place(x=200,y=0)

        self.buttonEscape.place(x=0, y=0)
        self.buttonAdd.place(x=450,y=30)
        self.buttonRemove.place(x=550, y=30)

        self.entrySearch.place(x=400,y=0)

        self.optionMenuFilter.place(x=280,y=5)

        #Configs
        self.optionMenuFilter.config(width=7)
        self.bind("<Escape>", self.escape)

        self.previousFilter = "Date added"
        self.filter()
    
    def showall(self):
        print(f"Books currently in the library: {len(self.bookList)}")
        counter = 0
        for i in self.bookList:
            counter += 1
            print(f"Book {counter}: {i.name}, {i.favourite}")

        print("Here's what the current library list looks like")
        print(self.bookList)
            
    def addBook(self):          #PS this needs to read current time and place it down
        addABook = Toplevel(self)  # Create a new window
        addABook.title("Add Book")
        addABook.geometry("600x500")  
        Label(addABook, text="Add Books").place(x=150,y=0)
        Label(addABook, text="Name").place(x=30,y=250)
        Label(addABook, text="Link").place(x=30,y=400)
        Label(addABook, text="Description/Comments").place(x=350,y=100)

        bookName = Entry(addABook, bg="white", fg="black")
        link = Entry(addABook, bg="white", fg="black")
        comments = Entry(addABook, bg="white", fg="black")

        bookName.place(x=30,y=300)
        link.place(x=30,y=450)
        comments.place(x=350,y=150)

        Button(addABook, text="Cancel", command=addABook.destroy).place(x=400,y=350)    
        Button(addABook, text="Add", command=lambda: self.add(bookName.get(), datetime.now().strftime("%Y %m %d %M %S"),
                                                              link=link.get(), comments=comments.get())).place(x=500,y=350)

    def add(self, name, date, favourite="",
            link=None, comments=None):
        
        with open ("bookList.csv", "a") as f:
            f.write(f"{name},{date},{favourite},{comments},{link}") 
            f.write("\n")

    def removeBook(self):       #Search function here
        self.removeABook = Toplevel(self)  # Create a new window
        self.removeABook.title("Remove Book")
        self.removeABook.geometry("400x500")

        Label(self.removeABook, text="REMOVE", font=("Impact", 25)).place(x=170,y=100)
        self.search = Entry(self.removeABook, text="", width=43)
        self.search.insert(0, "")
        self.search.place(x=0, y=150)
        self.previousSearch = ""
        self.found = []

        self.searching()

    def remove(self, name):
        print(name)
        pass

    def searching(self):
        self.currentSearch = self.search.get()

        if self.currentSearch == "":            #If entry is empty, do nothing
            if self.found != []:                            #Clears current results
                    for i in self.found:                        #Clears all the buttons from screen
                        i.destroy()
                    self.found = []                             #Resets the array of found items
            self.after(100, self.searching)
        
        else:
            if self.currentSearch != self.previousSearch:       #When search changes, run the code
                currentx = 0
                currenty = 180

                if self.found != []:                            #Clears current results
                    for i in self.found:                        #Clears all the buttons from screen
                        i.destroy()
                    self.found = []                             #Resets the array of found items

                for i in self.bookList:                         #
                    if self.currentSearch in i.name:
                        match = Button(self.removeABook, text=i.name, command=lambda: self.remove(match.cget('text')),height=2, width=40)
                        match.place(x=currentx, y=currenty)
                        self.found.append(match)
                        currenty += 43
                    
            self.previousSearch = self.currentSearch
            self.after(100, self.searching)

    def searchButtons(self):


        
        pass
    def change(self):
        pass

    def filter(self):
        self.currentFilter = self.chosenFilter.get()

        if self.currentFilter != self.previousFilter:
            match self.currentFilter:
                case "Alphabetical":
                    self.read()
                    length = len(self.bookList)                 #Takes length of array

                    for i in range(length):
                        #print(f"i: {i} | self.bookList[i].name: {self.bookList[i].name}")
                        smallest = i
                        for j in range(i+1, length):           
                            if self.bookList[smallest].name >= self.bookList[j].name:     
                                smallest = j                    
                                self.bookList[i], self.bookList[smallest] = self.bookList[smallest], self.bookList[i]   

                    self.destroyBooks()
                    self.createBooks()

                case "Date added":
                    self.read()
                    length = len(self.bookList)                 #Takes length of array

                    for i in range(length):
                        #print(f"i: {i} | self.bookList[i].name: {self.bookList[i].name}")
                        smallest = i
                        for j in range(i+1, length):
                            if self.bookList[smallest].dateAdded >= self.bookList[j].dateAdded:     
                                smallest = j                    
                                self.bookList[i], self.bookList[smallest] = self.bookList[smallest], self.bookList[i]   

                    self.destroyBooks()
                    self.createBooks()

                case "Favourite":
                    self.read()
                    toBeRemoved = []
                    for i in self.bookList:
                        if i.favourite != True:
                            toBeRemoved.append(i)
                    
                    for i in toBeRemoved:
                        self.bookList.remove(i)


                    self.destroyBooks()
                    self.createBooks()

        self.previousFilter = self.currentFilter
        self.after(100, self.filter)

    def read(self):
        with open("bookList.csv", 'r') as f:
            self.bookList = []
            for book in f:
                book = book.strip()
                list = book.split(',')  #ID, Name, Date, Favourite
                date = list[1]
                date = date.split()

                for i in range(0, len(date)):
                    date[i] = int(date[i])

                list[1] = datetime.datetime(date[0], date[1], date[2], date[3], date[4], date[5])
                object = Book(list[0], list[1], list[2], list[3])
                self.bookList.append(object)

    def createBooks(self):              #PS Try to destroy the previous buttons cause I don't think they were destroyed

        #Setting/Resetting up the grids
        self.bookGrid = []
        self.buttonList = []

        for row in range(0,9):              #Grid has 9 rows
            self.bookGrid.append([])

        #Ordering the booklist into a 2D array
        row = 0
        counter = 0
        index = 0
        run = True


        while run == True:
            self.bookGrid[row].append(self.bookList[index])   
            counter += 1
            index += 1

            if counter == 11:           #The amount of coloums, everytime it reaches 11 it goes to a new row
                row += 1
                counter = 0

            if self.bookList[index] == self.bookList[-1]:       #If index is last entry stop the loop the code
                self.bookGrid[row].append(self.bookList[index])
                break

        #Function to set up the books (Initial)
        self.coordinateX = 30
        self.coordinateY = 60

        coordinateX = self.coordinateX
        coordinateY = self.coordinateY

        for row in range(0,len(self.bookGrid)):              #Loops to place the rows and column
            for column in self.bookGrid[row]:          #Placeholder:self.bookList[column]
                column.button = Button(self, text=column.name, command=self.read, width=2, height=5)
                self.buttonList.append(column.button)
                column.button.place(x=coordinateX,y=coordinateY)
                coordinateX = coordinateX + 50
            coordinateX = self.coordinateX
            coordinateY = coordinateY + 100

    def destroyBooks(self):
        for button in self.buttonList:
            button.destroy()
        self.buttonList = []

    def test(self):
        print("Works!")

    def escape(self, event=None):
        self.destroy()

    def nothing(self):
        #Does absolutely nothing!
        pass




class Book:
    def __init__(self, name, dateAdded, #dateAdded in the format: year month date hours minutes seconds" (seperated by spaces)
                 favourite=False, title=None, link=None, author=None, comments=None, button=None):
        self.name = name
        self.dateAdded = dateAdded

        self.favourite = bool(favourite)
        self.title = title
        self.links = link
        self.author = author
        self.comments = comments
        self.button = button


    def show(self):
        print(self.name, "favourite:", self.favourite)

    def hover(self, event):
        pass


"""
#Functions
def add():
    Librarby.addBook()

def remove():
    pass

def bookify(name, favourite=False):
    book = Book(name, favourite)
    Librarby.add(book)

def escape(event=None):
    window.destroy()


def read():
    pass

def nothing():
    #Nothing happens
    pass
"""



"""
with open("bookList.csv", 'r') as f:
    bookList = []
    for line in f:
        line = line.strip()
        a = line.split(',')
        bookList.append(a)

for object in bookList:
    name = object[1]
    favourite = bool(object[2]) #As long as object[2] = "", bool will return false.
    book = Book(name, favourite)
    Librarby.read(book)
"""

if __name__ == "__main__":
    window = Library(1)
    window.mainloop()


