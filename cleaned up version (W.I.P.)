import tkinter as tk
from tkinter import *
import datetime                             #Datetime API
import requests 



class Library(tk.Tk): 
    def __init__(self, ID):
        super().__init__()                  
        self.ID = ID                        
        self.bookList = []                  
        self.ascending = True              
    
        self.title("")               
        self.geometry("650x650")                          

        self.filterOptions = ["Alphabetical", "Date added", "Favourite"]
        self.chosenFilter = StringVar()
        self.chosenFilter.set("Date added")


        self.LibraryName = Label(self, text="Novels")

        self.buttonEscape = Button(self, text="Escape", command=self.escape)
        self.buttonAdd = Button(self, text="Add", command=self.windowAddBook)
        self.buttonRemove = Button(self, text="Remove", command=self.windowRemoveBook)

        self.entrySearch = Entry(self, text="Search...", width=25)              

        self.optionMenuFilter = OptionMenu(self, self.chosenFilter, *self.filterOptions)

        self.LibraryName.place(x=200,y=0)
    
        self.buttonEscape.place(x=0, y=0)
        self.buttonAdd.place(x=450,y=30)
        self.buttonRemove.place(x=550, y=30)
        self.entrySearch.place(x=400,y=0)
        self.optionMenuFilter.place(x=280,y=5)

        self.optionMenuFilter.config(width=7)

        self.bind("<Escape>", self.escape)
        self.previousFilter = "Date added"

        self.initializeBooks()
        self.placeBooks()

#-----------------------------------------------------------

    def windowAddBook(self):
        def add(name="nam", date="", link="", comments=""):
            with open("bookList.csv", 'a') as file:     #Use request to find title ig also use date as API
                name = name
                dateAdded = date
                favourite = ""
                title = ""
                link = link
                comments = comments
                file.write(f"{name},{dateAdded},{favourite},{title}\n")


        addABook = Toplevel(self)  # Create a new window
        addABook.title("Add Book")
        addABook.geometry("600x500")  
        Label(addABook, text="Name").place(x=30,y=250)
        Label(addABook, text="Link").place(x=30,y=400)
        Label(addABook, text="Description/Comments").place(x=350,y=100)
        Button(addABook, text="Insert Image",width=10,height=12).place(x=60,y=30)

        nameEntry = Entry(addABook, bg="white", fg="black")
        linkEntry = Entry(addABook, bg="white", fg="black")
        commentsEntry = Entry(addABook, bg="white", fg="black")

        nameEntry.place(x=30,y=300)
        linkEntry.place(x=30,y=450)
        commentsEntry.place(x=350,y=150)

        Button(addABook, text="Cancel", command=addABook.destroy).place(x=400,y=350)    
        Button(addABook, text="Add", command=lambda: add(nameEntry.get(), datetime.now().strftime("%Y %m %d %M %S"),
                                                              link=linkEntry.get(), comments=commentsEntry.get())).place(x=500,y=350)


    def windowRemoveBook(self):

        def searching():
            removeABook.currentSearch = removeABook.search.get()

            if removeABook.currentSearch == "":         
                if removeABook.found != []:                          
                        for i in removeABook.found:                     
                            i.destroy()
                        removeABook.found = []                         
                removeABook.after(100, searching)              
            
            else:
                if removeABook.currentSearch != removeABook.previousSearch:     
                    removeABook.currentCoordinateX = 0                  #Inital coordinate of X
                    removeABook.currentCoordinateY = 180                #Initial coordinate of Y

                    if removeABook.found != []:                        
                        for book in removeABook.found:                       
                            book.destroy()
                        removeABook.found = []                           

                    for book in removeABook.self.LibraryBookList:
                        if self.currentSearch in book.name:
                            match = Button(removeABook, text=book.name, command=lambda: destroy,height=2, width=40)
                            match.place(x=removeABook.currentCoordinateX, y=removeABook.currentCoordinateY)
                            removeABook.found.append(match)
                            removeABook.currentCoordinateY += 43
                        
                removeABook.previousSearch = removeABook.currentSearch
                removeABook.after(100, searching)
                
        def destroy(self):
            pass

        removeABook = Toplevel(self)       
        removeABook.title("Remove Book")
        removeABook.geometry("400x500")
        removeABook.self = self

        #removeABook.initialCoordinateX = 0
        #removeABook.initalCoordinateY = 180

        Label(removeABook, text="REMOVE", font=("Impact", 25)).place(x=170,y=100)
        Button(removeABook, text="ESC", command=destroy).place(x=0,y=0)

        removeABook.search = Entry(removeABook, text="", width=43)
        removeABook.search.insert(0, "")           #Sets the default value of the entry to ""
        removeABook.search.place(x=0, y=150)
        removeABook.previousSearch = ""            #Initializes the previous search for the search method
        removeABook.previousSearch = ""
        removeABook.found = []

        searching()                    

#-----------------------------------------------------------

    def initializeBooks(self):
        with open("bookList.csv", 'r') as f:            
            self.LibraryBookList = []
            for book in f:                      #Loops through every line
                book = book.strip()
                list = book.split(',')          #Array format: Name, Date, Favourite, Title (format only for testing right now)
                date = list[1]          
                date = date.split()             #Converts the date entry into a list

                for i in range(0, len(date)):   #Converts the date data into integers to be used in the datetime.datetime function
                    date[i] = int(date[i])  
                list[1] = datetime.datetime(date[0], date[1], date[2], date[3], date[4], date[5])

                placeholder = Book(self)
                placeholder.name = list[0]
                placeholder.date = list[1]
                placeholder.favourite = list[2]
                placeholder.title = list[3]
                placeholder.configure(text=placeholder.name, command=placeholder.info, width=2, height=5)

                self.LibraryBookList.append(placeholder)

    def placeBooks(self):
        initialCoordinateX = 30
        initialCoordinateY = 60

        currentCoordinateX = initialCoordinateX                  #Creates a new variable to change
        currentCoordinateY = initialCoordinateY

        amountOfBooks = len(self.LibraryBookList)
        currentAmountOfBooks = 0

        for row in range(0,3):
            if currentAmountOfBooks >= amountOfBooks:
                break

            for column in range(0,9):
                if currentAmountOfBooks >= amountOfBooks:
                    break
                
                currentAmountOfBooks += 1
                index = row*9 + column
                print(index)
                self.LibraryBookList[index].place(x=currentCoordinateX, y=currentCoordinateY)
                currentCoordinateX += 50

            currentCoordinateX = initialCoordinateX
            currentCoordinateY += 100

    def hideBooks(self):
        for book in self.LibraryBookList:
            book.destroy()

    def escape(self, event=None):
        self.destroy()

    def nothing(self):
        pass

class Book(tk.Button):              #Inherits from tk button
    def __init__(self, parent, *args, **kwargs):
        tk.Button.__init__(self, parent, *args, **kwargs)
        self.parent = parent

    def info(self):
        print(self.name)
    
    def nothing(self):
        pass


if __name__ == "__main__":          #Runs the code
    window = Library(1)             #Library has ID of 1
    window.mainloop()
